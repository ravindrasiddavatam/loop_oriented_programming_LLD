Original Grammar
================
< Statements > ::= < Expression > < Statements > | < Expression > | "stop"

< Loop > ::= "{" Statements "}"

< Expression > ::= < Loop >
                    | < If >
                    | < Display >
                    | < Input >
                    | < Function-Def >
                    | < Object >
                    | < Assign >

< Assign >        ::= < L-Value > ":=" < Expression >
                   | < EqualsCondition >

< If > ::= "if" < EqualsCondition > "then" < Expression >                    

< Display > ::= "display" < Ref > | "display" < Literal >    

< Input > ::= "read" < Ref > | "prompt" < String > < Ref >

< Function-Def > ::= "function" < Id > "(" < Ids > ")" < Loop >  

< Ids > = < Id > "," < Ids > | < Id > | ""

< Object > ::= < Id > ":" "[" < Object-Statements > "]"

< Object-Statements > ::= < Object-Statement > < Object-Statements > 
                            | < Object-Statement >

< Object-Statement > ::= < Function-Def >
                            | < Constructor >
                            | < Class-Var >   

< Class-Var > ::= "|" < Ids-Spaces > "|"

< Ids-Spaces > ::= < Id > < Ids-Spaces > | < Id >

< Constructor > ::= "constructor" "(" < Ids > ")" < Loop >    

< L-Value >    ::= < Ref >

< EqualsCondition > ::= < EqualsCondition > "=" < Condition >
                   | < EqualsCondition > "<>" < Condition >
                   | < Condition >

< Condition >       ::= < Condition > "<" < Sum >
                   | < Condition > ">" < Sum >
                   | < Condition > "<=" < Sum >
                   | < Condition > ">=" < Sum >
                   | < Sum >

< Sum >        ::= < Sum > "+" < Term >
                   | < Sum > "-" < Term >
                   | < Term >
                   
< Term >       ::= < Term > "*" < Factor >
                   | < Term > "/" < Factor >
                   | < Term > "%" < Factor >
                   | < Factor >

< Factor >     ::= < Factor > "^" < Unary >
                   | < Unary >

< Unary >       ::= "-" < Expression >
                    | "+" < Expression >
                    | "#" < Expression >
                    | < Function-Call >

< Function-Call > ::= < Id > "(" < Ids > ")"
                    | < Access >

< Access >      ::= < Ref >
                    | < Low-Level >
                    | < Object-New >     

< Object-New > ::= "new" < Id > "(" < Ids > ")"
                   
< Low-Level >      ::= < Array >
                        | < Literal >

< Array >           ::= "<" < Literals > ">"

< Literal >   ::= < Number > | < String >

< Literals >        ::= < Literal > < Literals > | < Literal > 

< Ref >        ::= < Id > ":" < Id >
                    | < Id > ":" < Id > "(" < Ids > ")"
                    | < Id > "_" < Id >
                    | < Id > 

< Id >         ::= < Letter >
                   | < Ref > < Letter > 
                   | < Ref > < Digit >
                   
< Number >     ::= < Integer > | < Real >

< Integer >    ::= < Integer > < Digit >
                   | < Digit >

< Real >       ::= < Integer > "." < Integer >

< String >      ::= "\"" < Chars > "\""

< Chars >       ::= < Letter > < Chars > | < Letter >

< Digit >      ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"



LL(1) Grammar
=============
This is the grammar after tranforming the relevant parts into LL(1).

<Statements>      ::= <Expression> <Statements'>

<Statements'>  ::= <Expression> <Statements'> | "stop" | ""

<Loop>            ::= "{" <Statements> "}"

<Expression>      ::= <Loop> 
                        | <If> 
                        | <Display> 
                        | <Input> 
                        | <Function-Def> 
                        | <Object> 
                        | <Assign>

<Assign>          ::= <L-Value> ":=" <Expression> 
                        | <EqualsCondition>

<If>              ::= "if" <EqualsCondition> "then" <Expression>

<Display>         ::= "display" <Ref> 
                        | "display" <Literal>

<Input>           ::= "read" <Ref> 
                        | "prompt" <String> <Ref>

<Function-Def>    ::= "function" <Id> "(" <Ids> ")" <Loop>

<Ids>             ::= <Id> <Ids'> | ""

<Ids'>            ::= "," <Id> <Ids'>
                        | ""

<Object>          ::= <Id> ":" "[" <Object-Statements> "]"

<Object-Statements> ::= <Object-Statement> <Object-Statements'>

<Object-Statements'> ::= <Object-Statement> <Object-Statements'> 
                            | ""

<Object-Statement> ::= <Function-Def> 
                        | <Constructor> 
                        | <Class-Var>

<Class-Var>       ::= "|" <Ids-Spaces> "|"

<Ids-Spaces>      ::= <Id> <Ids-Spaces'> | ""

<Ids-Spaces'>  ::= <Id> <Ids-Spaces'> 
                        | ""

<Constructor>     ::= "constructor" "(" <Ids> ")" <Loop>

<EqualsCondition> ::= <Condition> <EqualsCondition'>

<EqualsCondition'> ::= "=" <Condition> <EqualsCondition'>
                            | "<>" <Condition> <EqualsCondition'>
                            | ""

<Condition>       ::= <Sum> <Condition'>

<Condition'>      ::= "<" <Sum> <Condition'>
                        | ">" <Sum> <Condition'>
                        | "<=" <Sum> <Condition'>
                        | ">=" <Sum> <Condition'>
                        | ""

<Sum>             ::= <Term> <Sum'>

<Sum'>            ::= "+" <Term> <Sum'> 
                        | "-" <Term> <Sum'> 
                        | ""

<Term>            ::= <Factor> <Term'>

<Term'>           ::= "*" <Factor> <Term'> 
                        | "/" <Factor> <Term'> 
                        | "%" <Factor> <Term'> 
                        | ""

<Factor>          ::= <Unary> <Factor'>

<Factor'>         ::= "^" <Unary> <Factor'> 
                        | ""

<Unary>           ::= "-" <Expression> 
                        | "+" <Expression> 
                        | "#" <Low-Level> 
                        | <Function-Call>

<Expressions>     ::= <Expression> <Expressions'> | ""

<Expressions'>    ::= <Expression> <Expressions'> | ""

<Function-Call>   ::= <Id> "(" <Expressions> ")" 
                        | <Access>

<Access>          ::= <Ref> 
                        | <Low-Level> 
                        | <Object-New>

<Object-New>      ::= "new" <Id> "(" <Expressions> ")"

<Low-Level>       ::= <Array> 
                        | <Literal>

<Array>           ::= "<" <Literals> ">"

<Literal>         ::= <Number> 
                        | <String>

<Literals>        ::= <Literal> <Literals'>

<Literals'>       ::= <Literal> <Literals'> 
                        | ""

<Ref>             ::= <Id> ":" <Id> 
                        | <Id> ":" <Id> "(" <Expressions> ")" 
                        | <Id> "_" <Integer> 
                        | <Id>

<L-Value>         ::= <Ref>

<Id>              ::= <Letter> <Id'>
                        | <Letter>

<Id'>             ::= <Letter> <Id'>
                        | <Digit> <Id'>
                        | ""

<Number>          ::= <Integer> 
                        | <Real>

<Integer>         ::= <Integer> <Digit> 
                        | <Digit>

<Real>            ::= <Integer> "." <Integer>

<String>          ::= "\"" <Chars> "\""

<Chars>           ::= <Letter> <Chars'>

<Chars'>          ::= <Letter> <Chars'> 
                        | ""

<Letter>          ::= All alphabets including special symbols

<Digit>           ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"



Parser Grammar
==============
This is the grammar with the tokens removed and placed in a lexer grammar.

<Statements>      ::= <Expression> <Statements'>

<Statements'>  ::= <Expression> <Statements'> | STOP | ""

<Loop>            ::= LFLOWER <Statements> RFLOWER

<Expression>      ::= <Loop> 
                        | <If> 
                        | <Display> 
                        | <Input> 
                        | <Function-Def> 
                        | <Object> 
                        | <Assign>

<Assign>          ::= <L-Value> ASSIGN <Expression> 
                        | <EqualsCondition>

<If>              ::= IF <EqualsCondition> THEN <Expression>

<Display>         ::= DISPLAY <Display'>

<Display'>        ::= <Ref>
                        | <Literal>

<Input>           ::= READ <Ref> 
                        | PROMPT <String> <Ref>

<Function-Def>    ::= FUNCTION <Id> LPAREN <Ids> RPAREN <Loop>

<Ids>             ::= <Id> <Ids'> 
                        | ""

<Ids'>            ::= COMMA <Id> <Ids'>
                        | ""

<Object>          ::= <Id> COLON "[" <Object-Statements> "]"

<Object-Statements> ::= <Object-Statement> <Object-Statements'>

<Object-Statements'> ::= <Object-Statement> <Object-Statements'> 
                            | ""

<Object-Statement> ::= <Function-Def> 
                        | <Constructor> 
                        | <Class-Var>

<Class-Var>       ::= PIPE <Ids-Spaces> PIPE

<Ids-Spaces>      ::= <Id> <Ids-Spaces'> 
                        | ""

<Ids-Spaces'>     ::= <Id> <Ids-Spaces'> 
                        | ""

<Constructor>     ::= CONSTRUCTOR LPAREN <Ids> RPAREN <Loop>

<EqualsCondition> ::= <Condition> <EqualsCondition'>

<EqualsCondition'> ::= EQ <Condition> <EqualsCondition'>
                            | NEQ <Condition> <EqualsCondition'>
                            | ""

<Condition>       ::= <Sum> <Condition'>

<Condition'>      ::= LT <Sum> <Condition'>
                        | GT <Sum> <Condition'>
                        | LTE <Sum> <Condition'>
                        | GTE <Sum> <Condition'>
                        | ""

<Sum>             ::= <Term> <Sum'>

<Sum'>            ::= ADD <Term> <Sum'> 
                        | SUB <Term> <Sum'> 
                        | ""

<Term>            ::= <Factor> <Term'>

<Term'>           ::= MUL <Factor> <Term'> 
                        | DIV <Factor> <Term'> 
                        | MOD <Factor> <Term'> 
                        | ""

<Factor>          ::= <Unary> <Factor'>

<Factor'>         ::= POW <Unary> <Factor'> 
                        | ""

<Unary>           ::= SUB <Expression> 
                        | ADD <Expression> 
                        | HASH <Low-Level> 
                        | <Function-Call>

<Expressions>     ::= <Expression> <Expressions'> 
                        | ""

<Expressions'>    ::= <Expression> <Expressions'> 
                        | ""

<Function-Call>   ::= <Id> LPAREN <Expressions> RPAREN
                        | <Access>

<Access>          ::= <Ref> 
                        | <Low-Level> 
                        | <Object-New>

<Object-New>      ::= NEW <Id> LPAREN <Expressions> RPAREN

<Low-Level>       ::= <Array> 
                        | <Literal>

<Array>           ::= LT <Literals> GT

<Literal>         ::= <Number> 
                        | <String>

<Literals>        ::= <Literal> <Literals'>

<Literals'>       ::= <Literal> <Literals'> 
                        | ""

<Ref>             ::= <Id> COLON <Id> 
                        | <Id> COLON <Id> LPAREN <Expressions> RPAREN
                        | <Id> UNDERSCORE <Integer> 
                        | <Id>

<L-Value>         ::= <Ref>



Lexer Grammar
=============
This is the set of regular expressions defining the tokens.

ADD         +
SUB         -
MUL         *
DIV         /
POW         ^
LPAREN      \(
RPAREN      \)
INT         [0-9]+
REAL        [0-9]+\.[0-9]+
ID          [a-zA-Z_][a-zA-Z_0-9]*
ASSIGN      :=
FUNCTION    function
SEMI        ;
IF          if
THEN        then
STOP        stop
LFLOWER       {
RFLOWER       }
READ        read
PROMPT      prompt
DISPLAY     display
LT          <
LTE         <=
GT          >
GTE         >=
EQ          =
NEQ         <>
COMMA       ,
HASH        #
NEW         new
STRING      \"[^\"]*\"
ID          [a-zA-Z_][a-zA-Z0-9_]*
COLON       :
UNDERSCORE  _
MOD         %
CONSTRUCTOR constructor
LCLOSE     [
RCLOSE     ]
PIPE        |
